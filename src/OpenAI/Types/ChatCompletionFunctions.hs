-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema ChatCompletionFunctions
module OpenAI.Types.ChatCompletionFunctions where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified OpenAI.Common
import OpenAI.TypeAlias

-- | Defines the object schema located at @components.schemas.ChatCompletionFunctions@ in the specification.
-- 
-- 
data ChatCompletionFunctions = ChatCompletionFunctions {
  -- | description: A description of what the function does, used by the model to choose when and how to call the function.
  chatCompletionFunctionsDescription :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | name: The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
  , chatCompletionFunctionsName :: Data.Text.Internal.Text
  -- | parameters: The parameters the functions accepts, described as a JSON Schema object. See the [guide](\/docs\/guides\/text-generation\/function-calling) for examples, and the [JSON Schema reference](https:\/\/json-schema.org\/understanding-json-schema\/) for documentation about the format. 
  -- 
  -- Omitting \`parameters\` defines a function with an empty parameter list.
  , chatCompletionFunctionsParameters :: (GHC.Maybe.Maybe FunctionParameters)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ChatCompletionFunctions
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (chatCompletionFunctionsDescription obj) : ["name" Data.Aeson.Types.ToJSON..= chatCompletionFunctionsName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("parameters" Data.Aeson.Types.ToJSON..=)) (chatCompletionFunctionsParameters obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (chatCompletionFunctionsDescription obj) : ["name" Data.Aeson.Types.ToJSON..= chatCompletionFunctionsName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("parameters" Data.Aeson.Types.ToJSON..=)) (chatCompletionFunctionsParameters obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON ChatCompletionFunctions
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "ChatCompletionFunctions" (\obj -> ((GHC.Base.pure ChatCompletionFunctions GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "parameters"))}
-- | Create a new 'ChatCompletionFunctions' with all required fields.
mkChatCompletionFunctions :: Data.Text.Internal.Text -- ^ 'chatCompletionFunctionsName'
  -> ChatCompletionFunctions
mkChatCompletionFunctions chatCompletionFunctionsName = ChatCompletionFunctions{chatCompletionFunctionsDescription = GHC.Maybe.Nothing,
                                                                                chatCompletionFunctionsName = chatCompletionFunctionsName,
                                                                                chatCompletionFunctionsParameters = GHC.Maybe.Nothing}
