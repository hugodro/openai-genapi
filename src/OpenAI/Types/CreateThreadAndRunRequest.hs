-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema CreateThreadAndRunRequest
module OpenAI.Types.CreateThreadAndRunRequest where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified OpenAI.Common
import OpenAI.TypeAlias
import {-# SOURCE #-} OpenAI.Types.AssistantToolsCode
import {-# SOURCE #-} OpenAI.Types.AssistantToolsFunction
import {-# SOURCE #-} OpenAI.Types.AssistantToolsRetrieval
import {-# SOURCE #-} OpenAI.Types.CreateThreadRequest

-- | Defines the object schema located at @components.schemas.CreateThreadAndRunRequest@ in the specification.
-- 
-- 
data CreateThreadAndRunRequest = CreateThreadAndRunRequest {
  -- | assistant_id: The ID of the [assistant](\/docs\/api-reference\/assistants) to use to execute this run.
  createThreadAndRunRequestAssistantId :: Data.Text.Internal.Text
  -- | instructions: Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.
  , createThreadAndRunRequestInstructions :: (GHC.Maybe.Maybe (OpenAI.Common.Nullable Data.Text.Internal.Text))
  -- | metadata: Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
  , createThreadAndRunRequestMetadata :: (GHC.Maybe.Maybe (OpenAI.Common.Nullable Data.Aeson.Types.Internal.Object))
  -- | model: The ID of the [Model](\/docs\/api-reference\/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
  , createThreadAndRunRequestModel :: (GHC.Maybe.Maybe (OpenAI.Common.Nullable Data.Text.Internal.Text))
  -- | thread
  , createThreadAndRunRequestThread :: (GHC.Maybe.Maybe CreateThreadRequest)
  -- | tools: Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
  -- 
  -- Constraints:
  -- 
  -- * Must have a maximum of 20 items
  , createThreadAndRunRequestTools :: (GHC.Maybe.Maybe (OpenAI.Common.Nullable ([CreateThreadAndRunRequestTools'NonNullableVariants])))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateThreadAndRunRequest
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["assistant_id" Data.Aeson.Types.ToJSON..= createThreadAndRunRequestAssistantId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("instructions" Data.Aeson.Types.ToJSON..=)) (createThreadAndRunRequestInstructions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (createThreadAndRunRequestMetadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("model" Data.Aeson.Types.ToJSON..=)) (createThreadAndRunRequestModel obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("thread" Data.Aeson.Types.ToJSON..=)) (createThreadAndRunRequestThread obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tools" Data.Aeson.Types.ToJSON..=)) (createThreadAndRunRequestTools obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["assistant_id" Data.Aeson.Types.ToJSON..= createThreadAndRunRequestAssistantId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("instructions" Data.Aeson.Types.ToJSON..=)) (createThreadAndRunRequestInstructions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (createThreadAndRunRequestMetadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("model" Data.Aeson.Types.ToJSON..=)) (createThreadAndRunRequestModel obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("thread" Data.Aeson.Types.ToJSON..=)) (createThreadAndRunRequestThread obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tools" Data.Aeson.Types.ToJSON..=)) (createThreadAndRunRequestTools obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON CreateThreadAndRunRequest
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateThreadAndRunRequest" (\obj -> (((((GHC.Base.pure CreateThreadAndRunRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assistant_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "instructions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "model")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "thread")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tools"))}
-- | Create a new 'CreateThreadAndRunRequest' with all required fields.
mkCreateThreadAndRunRequest :: Data.Text.Internal.Text -- ^ 'createThreadAndRunRequestAssistantId'
  -> CreateThreadAndRunRequest
mkCreateThreadAndRunRequest createThreadAndRunRequestAssistantId = CreateThreadAndRunRequest{createThreadAndRunRequestAssistantId = createThreadAndRunRequestAssistantId,
                                                                                             createThreadAndRunRequestInstructions = GHC.Maybe.Nothing,
                                                                                             createThreadAndRunRequestMetadata = GHC.Maybe.Nothing,
                                                                                             createThreadAndRunRequestModel = GHC.Maybe.Nothing,
                                                                                             createThreadAndRunRequestThread = GHC.Maybe.Nothing,
                                                                                             createThreadAndRunRequestTools = GHC.Maybe.Nothing}
-- | Defines the oneOf schema located at @components.schemas.CreateThreadAndRunRequest.properties.tools.items.oneOf@ in the specification.
-- 
-- 
data CreateThreadAndRunRequestTools'NonNullableVariants =
   CreateThreadAndRunRequestTools'NonNullableAssistantToolsCode AssistantToolsCode
  | CreateThreadAndRunRequestTools'NonNullableAssistantToolsRetrieval AssistantToolsRetrieval
  | CreateThreadAndRunRequestTools'NonNullableAssistantToolsFunction AssistantToolsFunction
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateThreadAndRunRequestTools'NonNullableVariants
    where {toJSON (CreateThreadAndRunRequestTools'NonNullableAssistantToolsCode a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (CreateThreadAndRunRequestTools'NonNullableAssistantToolsRetrieval a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (CreateThreadAndRunRequestTools'NonNullableAssistantToolsFunction a) = Data.Aeson.Types.ToJSON.toJSON a}
instance Data.Aeson.Types.FromJSON.FromJSON CreateThreadAndRunRequestTools'NonNullableVariants
    where {parseJSON val = case (CreateThreadAndRunRequestTools'NonNullableAssistantToolsCode Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((CreateThreadAndRunRequestTools'NonNullableAssistantToolsRetrieval Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((CreateThreadAndRunRequestTools'NonNullableAssistantToolsFunction Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched")) of
                           {Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a;
                            Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a}}
