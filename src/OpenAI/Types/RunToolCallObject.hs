-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema RunToolCallObject
module OpenAI.Types.RunToolCallObject where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified OpenAI.Common
import OpenAI.TypeAlias

-- | Defines the object schema located at @components.schemas.RunToolCallObject@ in the specification.
-- 
-- Tool call objects
data RunToolCallObject = RunToolCallObject {
  -- | function: The function definition.
  runToolCallObjectFunction :: RunToolCallObjectFunction'
  -- | id: The ID of the tool call. This ID must be referenced when you submit the tool outputs in using the [Submit tool outputs to run](\/docs\/api-reference\/runs\/submitToolOutputs) endpoint.
  , runToolCallObjectId :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON RunToolCallObject
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["function" Data.Aeson.Types.ToJSON..= runToolCallObjectFunction obj] : ["id" Data.Aeson.Types.ToJSON..= runToolCallObjectId obj] : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "function"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["function" Data.Aeson.Types.ToJSON..= runToolCallObjectFunction obj] : ["id" Data.Aeson.Types.ToJSON..= runToolCallObjectId obj] : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "function"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON RunToolCallObject
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "RunToolCallObject" (\obj -> (GHC.Base.pure RunToolCallObject GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "function")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id"))}
-- | Create a new 'RunToolCallObject' with all required fields.
mkRunToolCallObject :: RunToolCallObjectFunction' -- ^ 'runToolCallObjectFunction'
  -> Data.Text.Internal.Text -- ^ 'runToolCallObjectId'
  -> RunToolCallObject
mkRunToolCallObject runToolCallObjectFunction runToolCallObjectId = RunToolCallObject{runToolCallObjectFunction = runToolCallObjectFunction,
                                                                                      runToolCallObjectId = runToolCallObjectId}
-- | Defines the object schema located at @components.schemas.RunToolCallObject.properties.function@ in the specification.
-- 
-- The function definition.
data RunToolCallObjectFunction' = RunToolCallObjectFunction' {
  -- | arguments: The arguments that the model expects you to pass to the function.
  runToolCallObjectFunction'Arguments :: Data.Text.Internal.Text
  -- | name: The name of the function.
  , runToolCallObjectFunction'Name :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON RunToolCallObjectFunction'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["arguments" Data.Aeson.Types.ToJSON..= runToolCallObjectFunction'Arguments obj] : ["name" Data.Aeson.Types.ToJSON..= runToolCallObjectFunction'Name obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["arguments" Data.Aeson.Types.ToJSON..= runToolCallObjectFunction'Arguments obj] : ["name" Data.Aeson.Types.ToJSON..= runToolCallObjectFunction'Name obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON RunToolCallObjectFunction'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "RunToolCallObjectFunction'" (\obj -> (GHC.Base.pure RunToolCallObjectFunction' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "arguments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name"))}
-- | Create a new 'RunToolCallObjectFunction'' with all required fields.
mkRunToolCallObjectFunction' :: Data.Text.Internal.Text -- ^ 'runToolCallObjectFunction'Arguments'
  -> Data.Text.Internal.Text -- ^ 'runToolCallObjectFunction'Name'
  -> RunToolCallObjectFunction'
mkRunToolCallObjectFunction' runToolCallObjectFunction'Arguments runToolCallObjectFunction'Name = RunToolCallObjectFunction'{runToolCallObjectFunction'Arguments = runToolCallObjectFunction'Arguments,
                                                                                                                             runToolCallObjectFunction'Name = runToolCallObjectFunction'Name}
