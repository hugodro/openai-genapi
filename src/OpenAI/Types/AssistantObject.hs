-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema AssistantObject
module OpenAI.Types.AssistantObject where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified OpenAI.Common
import OpenAI.TypeAlias
import {-# SOURCE #-} OpenAI.Types.AssistantToolsCode
import {-# SOURCE #-} OpenAI.Types.AssistantToolsFunction
import {-# SOURCE #-} OpenAI.Types.AssistantToolsRetrieval

-- | Defines the object schema located at @components.schemas.AssistantObject@ in the specification.
-- 
-- Represents an \`assistant\` that can call the model and use tools.
data AssistantObject = AssistantObject {
  -- | created_at: The Unix timestamp (in seconds) for when the assistant was created.
  assistantObjectCreatedAt :: GHC.Types.Int
  -- | description: The description of the assistant. The maximum length is 512 characters.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 512
  , assistantObjectDescription :: (OpenAI.Common.Nullable Data.Text.Internal.Text)
  -- | file_ids: A list of [file](\/docs\/api-reference\/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Must have a maximum of 20 items
  , assistantObjectFileIds :: ([Data.Text.Internal.Text])
  -- | id: The identifier, which can be referenced in API endpoints.
  , assistantObjectId :: Data.Text.Internal.Text
  -- | instructions: The system instructions that the assistant uses. The maximum length is 32768 characters.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 32768
  , assistantObjectInstructions :: (OpenAI.Common.Nullable Data.Text.Internal.Text)
  -- | metadata: Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
  , assistantObjectMetadata :: (OpenAI.Common.Nullable Data.Aeson.Types.Internal.Object)
  -- | model: ID of the model to use. You can use the [List models](\/docs\/api-reference\/models\/list) API to see all of your available models, or see our [Model overview](\/docs\/models\/overview) for descriptions of them.
  , assistantObjectModel :: Data.Text.Internal.Text
  -- | name: The name of the assistant. The maximum length is 256 characters.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 256
  , assistantObjectName :: (OpenAI.Common.Nullable Data.Text.Internal.Text)
  -- | tools: A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types \`code_interpreter\`, \`retrieval\`, or \`function\`.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Must have a maximum of 128 items
  , assistantObjectTools :: ([AssistantObjectTools'Variants])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON AssistantObject
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["created_at" Data.Aeson.Types.ToJSON..= assistantObjectCreatedAt obj] : ["description" Data.Aeson.Types.ToJSON..= assistantObjectDescription obj] : ["file_ids" Data.Aeson.Types.ToJSON..= assistantObjectFileIds obj] : ["id" Data.Aeson.Types.ToJSON..= assistantObjectId obj] : ["instructions" Data.Aeson.Types.ToJSON..= assistantObjectInstructions obj] : ["metadata" Data.Aeson.Types.ToJSON..= assistantObjectMetadata obj] : ["model" Data.Aeson.Types.ToJSON..= assistantObjectModel obj] : ["name" Data.Aeson.Types.ToJSON..= assistantObjectName obj] : ["tools" Data.Aeson.Types.ToJSON..= assistantObjectTools obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "assistant"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["created_at" Data.Aeson.Types.ToJSON..= assistantObjectCreatedAt obj] : ["description" Data.Aeson.Types.ToJSON..= assistantObjectDescription obj] : ["file_ids" Data.Aeson.Types.ToJSON..= assistantObjectFileIds obj] : ["id" Data.Aeson.Types.ToJSON..= assistantObjectId obj] : ["instructions" Data.Aeson.Types.ToJSON..= assistantObjectInstructions obj] : ["metadata" Data.Aeson.Types.ToJSON..= assistantObjectMetadata obj] : ["model" Data.Aeson.Types.ToJSON..= assistantObjectModel obj] : ["name" Data.Aeson.Types.ToJSON..= assistantObjectName obj] : ["tools" Data.Aeson.Types.ToJSON..= assistantObjectTools obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "assistant"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON AssistantObject
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "AssistantObject" (\obj -> ((((((((GHC.Base.pure AssistantObject GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "file_ids")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "instructions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "model")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tools"))}
-- | Create a new 'AssistantObject' with all required fields.
mkAssistantObject :: GHC.Types.Int -- ^ 'assistantObjectCreatedAt'
  -> OpenAI.Common.Nullable Data.Text.Internal.Text -- ^ 'assistantObjectDescription'
  -> [Data.Text.Internal.Text] -- ^ 'assistantObjectFileIds'
  -> Data.Text.Internal.Text -- ^ 'assistantObjectId'
  -> OpenAI.Common.Nullable Data.Text.Internal.Text -- ^ 'assistantObjectInstructions'
  -> OpenAI.Common.Nullable Data.Aeson.Types.Internal.Object -- ^ 'assistantObjectMetadata'
  -> Data.Text.Internal.Text -- ^ 'assistantObjectModel'
  -> OpenAI.Common.Nullable Data.Text.Internal.Text -- ^ 'assistantObjectName'
  -> [AssistantObjectTools'Variants] -- ^ 'assistantObjectTools'
  -> AssistantObject
mkAssistantObject assistantObjectCreatedAt assistantObjectDescription assistantObjectFileIds assistantObjectId assistantObjectInstructions assistantObjectMetadata assistantObjectModel assistantObjectName assistantObjectTools = AssistantObject{assistantObjectCreatedAt = assistantObjectCreatedAt,
                                                                                                                                                                                                                                                   assistantObjectDescription = assistantObjectDescription,
                                                                                                                                                                                                                                                   assistantObjectFileIds = assistantObjectFileIds,
                                                                                                                                                                                                                                                   assistantObjectId = assistantObjectId,
                                                                                                                                                                                                                                                   assistantObjectInstructions = assistantObjectInstructions,
                                                                                                                                                                                                                                                   assistantObjectMetadata = assistantObjectMetadata,
                                                                                                                                                                                                                                                   assistantObjectModel = assistantObjectModel,
                                                                                                                                                                                                                                                   assistantObjectName = assistantObjectName,
                                                                                                                                                                                                                                                   assistantObjectTools = assistantObjectTools}
-- | Defines the oneOf schema located at @components.schemas.AssistantObject.properties.tools.items.oneOf@ in the specification.
-- 
-- 
data AssistantObjectTools'Variants =
   AssistantObjectTools'AssistantToolsCode AssistantToolsCode
  | AssistantObjectTools'AssistantToolsRetrieval AssistantToolsRetrieval
  | AssistantObjectTools'AssistantToolsFunction AssistantToolsFunction
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON AssistantObjectTools'Variants
    where {toJSON (AssistantObjectTools'AssistantToolsCode a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (AssistantObjectTools'AssistantToolsRetrieval a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (AssistantObjectTools'AssistantToolsFunction a) = Data.Aeson.Types.ToJSON.toJSON a}
instance Data.Aeson.Types.FromJSON.FromJSON AssistantObjectTools'Variants
    where {parseJSON val = case (AssistantObjectTools'AssistantToolsCode Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((AssistantObjectTools'AssistantToolsRetrieval Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((AssistantObjectTools'AssistantToolsFunction Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched")) of
                           {Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a;
                            Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a}}
