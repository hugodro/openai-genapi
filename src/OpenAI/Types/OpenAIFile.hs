-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema OpenAIFile
module OpenAI.Types.OpenAIFile where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified OpenAI.Common
import OpenAI.TypeAlias

-- | Defines the object schema located at @components.schemas.OpenAIFile@ in the specification.
-- 
-- The \`File\` object represents a document that has been uploaded to OpenAI.
data OpenAIFile = OpenAIFile {
  -- | bytes: The size of the file, in bytes.
  openAIFileBytes :: GHC.Types.Int
  -- | created_at: The Unix timestamp (in seconds) for when the file was created.
  , openAIFileCreatedAt :: GHC.Types.Int
  -- | filename: The name of the file.
  , openAIFileFilename :: Data.Text.Internal.Text
  -- | id: The file identifier, which can be referenced in the API endpoints.
  , openAIFileId :: Data.Text.Internal.Text
  -- | purpose: The intended purpose of the file. Supported values are \`fine-tune\`, \`fine-tune-results\`, \`assistants\`, and \`assistants_output\`.
  , openAIFilePurpose :: OpenAIFilePurpose'
  -- | status: Deprecated. The current status of the file, which can be either \`uploaded\`, \`processed\`, or \`error\`.
  , openAIFileStatus :: OpenAIFileStatus'
  -- | status_details: Deprecated. For details on why a fine-tuning training file failed validation, see the \`error\` field on \`fine_tuning.job\`.
  , openAIFileStatusDetails :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON OpenAIFile
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["bytes" Data.Aeson.Types.ToJSON..= openAIFileBytes obj] : ["created_at" Data.Aeson.Types.ToJSON..= openAIFileCreatedAt obj] : ["filename" Data.Aeson.Types.ToJSON..= openAIFileFilename obj] : ["id" Data.Aeson.Types.ToJSON..= openAIFileId obj] : ["purpose" Data.Aeson.Types.ToJSON..= openAIFilePurpose obj] : ["status" Data.Aeson.Types.ToJSON..= openAIFileStatus obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("status_details" Data.Aeson.Types.ToJSON..=)) (openAIFileStatusDetails obj) : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "file"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["bytes" Data.Aeson.Types.ToJSON..= openAIFileBytes obj] : ["created_at" Data.Aeson.Types.ToJSON..= openAIFileCreatedAt obj] : ["filename" Data.Aeson.Types.ToJSON..= openAIFileFilename obj] : ["id" Data.Aeson.Types.ToJSON..= openAIFileId obj] : ["purpose" Data.Aeson.Types.ToJSON..= openAIFilePurpose obj] : ["status" Data.Aeson.Types.ToJSON..= openAIFileStatus obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("status_details" Data.Aeson.Types.ToJSON..=)) (openAIFileStatusDetails obj) : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "file"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON OpenAIFile
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "OpenAIFile" (\obj -> ((((((GHC.Base.pure OpenAIFile GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "bytes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "filename")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "purpose")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "status_details"))}
-- | Create a new 'OpenAIFile' with all required fields.
mkOpenAIFile :: GHC.Types.Int -- ^ 'openAIFileBytes'
  -> GHC.Types.Int -- ^ 'openAIFileCreatedAt'
  -> Data.Text.Internal.Text -- ^ 'openAIFileFilename'
  -> Data.Text.Internal.Text -- ^ 'openAIFileId'
  -> OpenAIFilePurpose' -- ^ 'openAIFilePurpose'
  -> OpenAIFileStatus' -- ^ 'openAIFileStatus'
  -> OpenAIFile
mkOpenAIFile openAIFileBytes openAIFileCreatedAt openAIFileFilename openAIFileId openAIFilePurpose openAIFileStatus = OpenAIFile{openAIFileBytes = openAIFileBytes,
                                                                                                                                 openAIFileCreatedAt = openAIFileCreatedAt,
                                                                                                                                 openAIFileFilename = openAIFileFilename,
                                                                                                                                 openAIFileId = openAIFileId,
                                                                                                                                 openAIFilePurpose = openAIFilePurpose,
                                                                                                                                 openAIFileStatus = openAIFileStatus,
                                                                                                                                 openAIFileStatusDetails = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.OpenAIFile.properties.purpose@ in the specification.
-- 
-- The intended purpose of the file. Supported values are \`fine-tune\`, \`fine-tune-results\`, \`assistants\`, and \`assistants_output\`.
data OpenAIFilePurpose' =
   OpenAIFilePurpose'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | OpenAIFilePurpose'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | OpenAIFilePurpose'EnumFineTune -- ^ Represents the JSON value @"fine-tune"@
  | OpenAIFilePurpose'EnumFineTuneResults -- ^ Represents the JSON value @"fine-tune-results"@
  | OpenAIFilePurpose'EnumAssistants -- ^ Represents the JSON value @"assistants"@
  | OpenAIFilePurpose'EnumAssistantsOutput -- ^ Represents the JSON value @"assistants_output"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON OpenAIFilePurpose'
    where {toJSON (OpenAIFilePurpose'Other val) = val;
           toJSON (OpenAIFilePurpose'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (OpenAIFilePurpose'EnumFineTune) = "fine-tune";
           toJSON (OpenAIFilePurpose'EnumFineTuneResults) = "fine-tune-results";
           toJSON (OpenAIFilePurpose'EnumAssistants) = "assistants";
           toJSON (OpenAIFilePurpose'EnumAssistantsOutput) = "assistants_output"}
instance Data.Aeson.Types.FromJSON.FromJSON OpenAIFilePurpose'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "fine-tune" -> OpenAIFilePurpose'EnumFineTune
                                             | val GHC.Classes.== "fine-tune-results" -> OpenAIFilePurpose'EnumFineTuneResults
                                             | val GHC.Classes.== "assistants" -> OpenAIFilePurpose'EnumAssistants
                                             | val GHC.Classes.== "assistants_output" -> OpenAIFilePurpose'EnumAssistantsOutput
                                             | GHC.Base.otherwise -> OpenAIFilePurpose'Other val)}
-- | Defines the enum schema located at @components.schemas.OpenAIFile.properties.status@ in the specification.
-- 
-- Deprecated. The current status of the file, which can be either \`uploaded\`, \`processed\`, or \`error\`.
data OpenAIFileStatus' =
   OpenAIFileStatus'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | OpenAIFileStatus'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | OpenAIFileStatus'EnumUploaded -- ^ Represents the JSON value @"uploaded"@
  | OpenAIFileStatus'EnumProcessed -- ^ Represents the JSON value @"processed"@
  | OpenAIFileStatus'EnumError -- ^ Represents the JSON value @"error"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON OpenAIFileStatus'
    where {toJSON (OpenAIFileStatus'Other val) = val;
           toJSON (OpenAIFileStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (OpenAIFileStatus'EnumUploaded) = "uploaded";
           toJSON (OpenAIFileStatus'EnumProcessed) = "processed";
           toJSON (OpenAIFileStatus'EnumError) = "error"}
instance Data.Aeson.Types.FromJSON.FromJSON OpenAIFileStatus'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "uploaded" -> OpenAIFileStatus'EnumUploaded
                                             | val GHC.Classes.== "processed" -> OpenAIFileStatus'EnumProcessed
                                             | val GHC.Classes.== "error" -> OpenAIFileStatus'EnumError
                                             | GHC.Base.otherwise -> OpenAIFileStatus'Other val)}
