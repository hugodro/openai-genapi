-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema RunStepDetailsToolCallsCodeObject
module OpenAI.Types.RunStepDetailsToolCallsCodeObject where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified OpenAI.Common
import OpenAI.TypeAlias
import {-# SOURCE #-} OpenAI.Types.RunStepDetailsToolCallsCodeOutputImageObject
import {-# SOURCE #-} OpenAI.Types.RunStepDetailsToolCallsCodeOutputLogsObject

-- | Defines the object schema located at @components.schemas.RunStepDetailsToolCallsCodeObject@ in the specification.
-- 
-- Details of the Code Interpreter tool call the run step was involved in.
data RunStepDetailsToolCallsCodeObject = RunStepDetailsToolCallsCodeObject {
  -- | code_interpreter: The Code Interpreter tool call definition.
  runStepDetailsToolCallsCodeObjectCodeInterpreter :: RunStepDetailsToolCallsCodeObjectCodeInterpreter'
  -- | id: The ID of the tool call.
  , runStepDetailsToolCallsCodeObjectId :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON RunStepDetailsToolCallsCodeObject
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["code_interpreter" Data.Aeson.Types.ToJSON..= runStepDetailsToolCallsCodeObjectCodeInterpreter obj] : ["id" Data.Aeson.Types.ToJSON..= runStepDetailsToolCallsCodeObjectId obj] : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "code_interpreter"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["code_interpreter" Data.Aeson.Types.ToJSON..= runStepDetailsToolCallsCodeObjectCodeInterpreter obj] : ["id" Data.Aeson.Types.ToJSON..= runStepDetailsToolCallsCodeObjectId obj] : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "code_interpreter"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON RunStepDetailsToolCallsCodeObject
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "RunStepDetailsToolCallsCodeObject" (\obj -> (GHC.Base.pure RunStepDetailsToolCallsCodeObject GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code_interpreter")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id"))}
-- | Create a new 'RunStepDetailsToolCallsCodeObject' with all required fields.
mkRunStepDetailsToolCallsCodeObject :: RunStepDetailsToolCallsCodeObjectCodeInterpreter' -- ^ 'runStepDetailsToolCallsCodeObjectCodeInterpreter'
  -> Data.Text.Internal.Text -- ^ 'runStepDetailsToolCallsCodeObjectId'
  -> RunStepDetailsToolCallsCodeObject
mkRunStepDetailsToolCallsCodeObject runStepDetailsToolCallsCodeObjectCodeInterpreter runStepDetailsToolCallsCodeObjectId = RunStepDetailsToolCallsCodeObject{runStepDetailsToolCallsCodeObjectCodeInterpreter = runStepDetailsToolCallsCodeObjectCodeInterpreter,
                                                                                                                                                             runStepDetailsToolCallsCodeObjectId = runStepDetailsToolCallsCodeObjectId}
-- | Defines the object schema located at @components.schemas.RunStepDetailsToolCallsCodeObject.properties.code_interpreter@ in the specification.
-- 
-- The Code Interpreter tool call definition.
data RunStepDetailsToolCallsCodeObjectCodeInterpreter' = RunStepDetailsToolCallsCodeObjectCodeInterpreter' {
  -- | input: The input to the Code Interpreter tool call.
  runStepDetailsToolCallsCodeObjectCodeInterpreter'Input :: Data.Text.Internal.Text
  -- | outputs: The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (\`logs\`) or images (\`image\`). Each of these are represented by a different object type.
  , runStepDetailsToolCallsCodeObjectCodeInterpreter'Outputs :: ([RunStepDetailsToolCallsCodeObjectCodeInterpreter'Outputs'Variants])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON RunStepDetailsToolCallsCodeObjectCodeInterpreter'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["input" Data.Aeson.Types.ToJSON..= runStepDetailsToolCallsCodeObjectCodeInterpreter'Input obj] : ["outputs" Data.Aeson.Types.ToJSON..= runStepDetailsToolCallsCodeObjectCodeInterpreter'Outputs obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["input" Data.Aeson.Types.ToJSON..= runStepDetailsToolCallsCodeObjectCodeInterpreter'Input obj] : ["outputs" Data.Aeson.Types.ToJSON..= runStepDetailsToolCallsCodeObjectCodeInterpreter'Outputs obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON RunStepDetailsToolCallsCodeObjectCodeInterpreter'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "RunStepDetailsToolCallsCodeObjectCodeInterpreter'" (\obj -> (GHC.Base.pure RunStepDetailsToolCallsCodeObjectCodeInterpreter' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "input")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "outputs"))}
-- | Create a new 'RunStepDetailsToolCallsCodeObjectCodeInterpreter'' with all required fields.
mkRunStepDetailsToolCallsCodeObjectCodeInterpreter' :: Data.Text.Internal.Text -- ^ 'runStepDetailsToolCallsCodeObjectCodeInterpreter'Input'
  -> [RunStepDetailsToolCallsCodeObjectCodeInterpreter'Outputs'Variants] -- ^ 'runStepDetailsToolCallsCodeObjectCodeInterpreter'Outputs'
  -> RunStepDetailsToolCallsCodeObjectCodeInterpreter'
mkRunStepDetailsToolCallsCodeObjectCodeInterpreter' runStepDetailsToolCallsCodeObjectCodeInterpreter'Input runStepDetailsToolCallsCodeObjectCodeInterpreter'Outputs = RunStepDetailsToolCallsCodeObjectCodeInterpreter'{runStepDetailsToolCallsCodeObjectCodeInterpreter'Input = runStepDetailsToolCallsCodeObjectCodeInterpreter'Input,
                                                                                                                                                                                                                        runStepDetailsToolCallsCodeObjectCodeInterpreter'Outputs = runStepDetailsToolCallsCodeObjectCodeInterpreter'Outputs}
-- | Defines the oneOf schema located at @components.schemas.RunStepDetailsToolCallsCodeObject.properties.code_interpreter.properties.outputs.items.oneOf@ in the specification.
-- 
-- 
data RunStepDetailsToolCallsCodeObjectCodeInterpreter'Outputs'Variants =
   RunStepDetailsToolCallsCodeObjectCodeInterpreter'Outputs'RunStepDetailsToolCallsCodeOutputLogsObject RunStepDetailsToolCallsCodeOutputLogsObject
  | RunStepDetailsToolCallsCodeObjectCodeInterpreter'Outputs'RunStepDetailsToolCallsCodeOutputImageObject RunStepDetailsToolCallsCodeOutputImageObject
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON RunStepDetailsToolCallsCodeObjectCodeInterpreter'Outputs'Variants
    where {toJSON (RunStepDetailsToolCallsCodeObjectCodeInterpreter'Outputs'RunStepDetailsToolCallsCodeOutputLogsObject a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (RunStepDetailsToolCallsCodeObjectCodeInterpreter'Outputs'RunStepDetailsToolCallsCodeOutputImageObject a) = Data.Aeson.Types.ToJSON.toJSON a}
instance Data.Aeson.Types.FromJSON.FromJSON RunStepDetailsToolCallsCodeObjectCodeInterpreter'Outputs'Variants
    where {parseJSON val = case (RunStepDetailsToolCallsCodeObjectCodeInterpreter'Outputs'RunStepDetailsToolCallsCodeOutputLogsObject Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((RunStepDetailsToolCallsCodeObjectCodeInterpreter'Outputs'RunStepDetailsToolCallsCodeOutputImageObject Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                           {Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a;
                            Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a}}
