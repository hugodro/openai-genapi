-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema CreateSpeechRequest
module OpenAI.Types.CreateSpeechRequest where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified OpenAI.Common
import OpenAI.TypeAlias

-- | Defines the object schema located at @components.schemas.CreateSpeechRequest@ in the specification.
-- 
-- 
data CreateSpeechRequest = CreateSpeechRequest {
  -- | input: The text to generate audio for. The maximum length is 4096 characters.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 4096
  createSpeechRequestInput :: Data.Text.Internal.Text
  -- | model: One of the available [TTS models](\/docs\/models\/tts): \`tts-1\` or \`tts-1-hd\`
  , createSpeechRequestModel :: CreateSpeechRequestModel'Variants
  -- | response_format: The format to return audio in. 
  -- Supported formats are \`mp3\`, \`opus\`, \`aac\`, \`flac\`, \`pcm\`, and \`wav\`. 
  -- 
  -- The \`pcm\` audio format, similar to \`wav\` but without a header, utilizes a 24kHz sample rate, mono channel, and 16-bit depth in signed little-endian format.
  , createSpeechRequestResponseFormat :: (GHC.Maybe.Maybe CreateSpeechRequestResponseFormat')
  -- | speed: The speed of the generated audio. Select a value from \`0.25\` to \`4.0\`. \`1.0\` is the default.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 4.0
  -- * Minimum  of 0.25
  , createSpeechRequestSpeed :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | voice: The voice to use when generating the audio. Supported voices are \`alloy\`, \`echo\`, \`fable\`, \`onyx\`, \`nova\`, and \`shimmer\`. Previews of the voices are available in the [Text to speech guide](\/docs\/guides\/text-to-speech\/voice-options).
  , createSpeechRequestVoice :: CreateSpeechRequestVoice'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateSpeechRequest
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["input" Data.Aeson.Types.ToJSON..= createSpeechRequestInput obj] : ["model" Data.Aeson.Types.ToJSON..= createSpeechRequestModel obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("response_format" Data.Aeson.Types.ToJSON..=)) (createSpeechRequestResponseFormat obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("speed" Data.Aeson.Types.ToJSON..=)) (createSpeechRequestSpeed obj) : ["voice" Data.Aeson.Types.ToJSON..= createSpeechRequestVoice obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["input" Data.Aeson.Types.ToJSON..= createSpeechRequestInput obj] : ["model" Data.Aeson.Types.ToJSON..= createSpeechRequestModel obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("response_format" Data.Aeson.Types.ToJSON..=)) (createSpeechRequestResponseFormat obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("speed" Data.Aeson.Types.ToJSON..=)) (createSpeechRequestSpeed obj) : ["voice" Data.Aeson.Types.ToJSON..= createSpeechRequestVoice obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON CreateSpeechRequest
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateSpeechRequest" (\obj -> ((((GHC.Base.pure CreateSpeechRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "input")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "model")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "response_format")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "speed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "voice"))}
-- | Create a new 'CreateSpeechRequest' with all required fields.
mkCreateSpeechRequest :: Data.Text.Internal.Text -- ^ 'createSpeechRequestInput'
  -> CreateSpeechRequestModel'Variants -- ^ 'createSpeechRequestModel'
  -> CreateSpeechRequestVoice' -- ^ 'createSpeechRequestVoice'
  -> CreateSpeechRequest
mkCreateSpeechRequest createSpeechRequestInput createSpeechRequestModel createSpeechRequestVoice = CreateSpeechRequest{createSpeechRequestInput = createSpeechRequestInput,
                                                                                                                       createSpeechRequestModel = createSpeechRequestModel,
                                                                                                                       createSpeechRequestResponseFormat = GHC.Maybe.Nothing,
                                                                                                                       createSpeechRequestSpeed = GHC.Maybe.Nothing,
                                                                                                                       createSpeechRequestVoice = createSpeechRequestVoice}
-- | Defines the enum schema located at @components.schemas.CreateSpeechRequest.properties.model.anyOf@ in the specification.
-- 
-- 
data CreateSpeechRequestModel'OneOf2 =
   CreateSpeechRequestModel'OneOf2Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | CreateSpeechRequestModel'OneOf2Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | CreateSpeechRequestModel'OneOf2EnumTts_1 -- ^ Represents the JSON value @"tts-1"@
  | CreateSpeechRequestModel'OneOf2EnumTts_1Hd -- ^ Represents the JSON value @"tts-1-hd"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateSpeechRequestModel'OneOf2
    where {toJSON (CreateSpeechRequestModel'OneOf2Other val) = val;
           toJSON (CreateSpeechRequestModel'OneOf2Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (CreateSpeechRequestModel'OneOf2EnumTts_1) = "tts-1";
           toJSON (CreateSpeechRequestModel'OneOf2EnumTts_1Hd) = "tts-1-hd"}
instance Data.Aeson.Types.FromJSON.FromJSON CreateSpeechRequestModel'OneOf2
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "tts-1" -> CreateSpeechRequestModel'OneOf2EnumTts_1
                                             | val GHC.Classes.== "tts-1-hd" -> CreateSpeechRequestModel'OneOf2EnumTts_1Hd
                                             | GHC.Base.otherwise -> CreateSpeechRequestModel'OneOf2Other val)}
-- | Defines the oneOf schema located at @components.schemas.CreateSpeechRequest.properties.model.anyOf@ in the specification.
-- 
-- One of the available [TTS models](\/docs\/models\/tts): \`tts-1\` or \`tts-1-hd\`
data CreateSpeechRequestModel'Variants =
   CreateSpeechRequestModel'Text Data.Text.Internal.Text
  | CreateSpeechRequestModel'CreateSpeechRequestModel'OneOf2 CreateSpeechRequestModel'OneOf2
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateSpeechRequestModel'Variants
    where {toJSON (CreateSpeechRequestModel'Text a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (CreateSpeechRequestModel'CreateSpeechRequestModel'OneOf2 a) = Data.Aeson.Types.ToJSON.toJSON a}
instance Data.Aeson.Types.FromJSON.FromJSON CreateSpeechRequestModel'Variants
    where {parseJSON val = case (CreateSpeechRequestModel'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((CreateSpeechRequestModel'CreateSpeechRequestModel'OneOf2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                           {Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a;
                            Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a}}
-- | Defines the enum schema located at @components.schemas.CreateSpeechRequest.properties.response_format@ in the specification.
-- 
-- The format to return audio in. 
-- Supported formats are \`mp3\`, \`opus\`, \`aac\`, \`flac\`, \`pcm\`, and \`wav\`. 
-- 
-- The \`pcm\` audio format, similar to \`wav\` but without a header, utilizes a 24kHz sample rate, mono channel, and 16-bit depth in signed little-endian format.
data CreateSpeechRequestResponseFormat' =
   CreateSpeechRequestResponseFormat'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | CreateSpeechRequestResponseFormat'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | CreateSpeechRequestResponseFormat'EnumMp3 -- ^ Represents the JSON value @"mp3"@
  | CreateSpeechRequestResponseFormat'EnumOpus -- ^ Represents the JSON value @"opus"@
  | CreateSpeechRequestResponseFormat'EnumAac -- ^ Represents the JSON value @"aac"@
  | CreateSpeechRequestResponseFormat'EnumFlac -- ^ Represents the JSON value @"flac"@
  | CreateSpeechRequestResponseFormat'EnumPcm -- ^ Represents the JSON value @"pcm"@
  | CreateSpeechRequestResponseFormat'EnumWav -- ^ Represents the JSON value @"wav"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateSpeechRequestResponseFormat'
    where {toJSON (CreateSpeechRequestResponseFormat'Other val) = val;
           toJSON (CreateSpeechRequestResponseFormat'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (CreateSpeechRequestResponseFormat'EnumMp3) = "mp3";
           toJSON (CreateSpeechRequestResponseFormat'EnumOpus) = "opus";
           toJSON (CreateSpeechRequestResponseFormat'EnumAac) = "aac";
           toJSON (CreateSpeechRequestResponseFormat'EnumFlac) = "flac";
           toJSON (CreateSpeechRequestResponseFormat'EnumPcm) = "pcm";
           toJSON (CreateSpeechRequestResponseFormat'EnumWav) = "wav"}
instance Data.Aeson.Types.FromJSON.FromJSON CreateSpeechRequestResponseFormat'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "mp3" -> CreateSpeechRequestResponseFormat'EnumMp3
                                             | val GHC.Classes.== "opus" -> CreateSpeechRequestResponseFormat'EnumOpus
                                             | val GHC.Classes.== "aac" -> CreateSpeechRequestResponseFormat'EnumAac
                                             | val GHC.Classes.== "flac" -> CreateSpeechRequestResponseFormat'EnumFlac
                                             | val GHC.Classes.== "pcm" -> CreateSpeechRequestResponseFormat'EnumPcm
                                             | val GHC.Classes.== "wav" -> CreateSpeechRequestResponseFormat'EnumWav
                                             | GHC.Base.otherwise -> CreateSpeechRequestResponseFormat'Other val)}
-- | Defines the enum schema located at @components.schemas.CreateSpeechRequest.properties.voice@ in the specification.
-- 
-- The voice to use when generating the audio. Supported voices are \`alloy\`, \`echo\`, \`fable\`, \`onyx\`, \`nova\`, and \`shimmer\`. Previews of the voices are available in the [Text to speech guide](\/docs\/guides\/text-to-speech\/voice-options).
data CreateSpeechRequestVoice' =
   CreateSpeechRequestVoice'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | CreateSpeechRequestVoice'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | CreateSpeechRequestVoice'EnumAlloy -- ^ Represents the JSON value @"alloy"@
  | CreateSpeechRequestVoice'EnumEcho -- ^ Represents the JSON value @"echo"@
  | CreateSpeechRequestVoice'EnumFable -- ^ Represents the JSON value @"fable"@
  | CreateSpeechRequestVoice'EnumOnyx -- ^ Represents the JSON value @"onyx"@
  | CreateSpeechRequestVoice'EnumNova -- ^ Represents the JSON value @"nova"@
  | CreateSpeechRequestVoice'EnumShimmer -- ^ Represents the JSON value @"shimmer"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateSpeechRequestVoice'
    where {toJSON (CreateSpeechRequestVoice'Other val) = val;
           toJSON (CreateSpeechRequestVoice'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (CreateSpeechRequestVoice'EnumAlloy) = "alloy";
           toJSON (CreateSpeechRequestVoice'EnumEcho) = "echo";
           toJSON (CreateSpeechRequestVoice'EnumFable) = "fable";
           toJSON (CreateSpeechRequestVoice'EnumOnyx) = "onyx";
           toJSON (CreateSpeechRequestVoice'EnumNova) = "nova";
           toJSON (CreateSpeechRequestVoice'EnumShimmer) = "shimmer"}
instance Data.Aeson.Types.FromJSON.FromJSON CreateSpeechRequestVoice'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "alloy" -> CreateSpeechRequestVoice'EnumAlloy
                                             | val GHC.Classes.== "echo" -> CreateSpeechRequestVoice'EnumEcho
                                             | val GHC.Classes.== "fable" -> CreateSpeechRequestVoice'EnumFable
                                             | val GHC.Classes.== "onyx" -> CreateSpeechRequestVoice'EnumOnyx
                                             | val GHC.Classes.== "nova" -> CreateSpeechRequestVoice'EnumNova
                                             | val GHC.Classes.== "shimmer" -> CreateSpeechRequestVoice'EnumShimmer
                                             | GHC.Base.otherwise -> CreateSpeechRequestVoice'Other val)}
