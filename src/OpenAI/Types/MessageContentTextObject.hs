-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema MessageContentTextObject
module OpenAI.Types.MessageContentTextObject where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified OpenAI.Common
import OpenAI.TypeAlias
import {-# SOURCE #-} OpenAI.Types.MessageContentTextAnnotationsFileCitationObject
import {-# SOURCE #-} OpenAI.Types.MessageContentTextAnnotationsFilePathObject

-- | Defines the object schema located at @components.schemas.MessageContentTextObject@ in the specification.
-- 
-- The text content that is part of a message.
data MessageContentTextObject = MessageContentTextObject {
  -- | text
  messageContentTextObjectText :: MessageContentTextObjectText'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON MessageContentTextObject
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["text" Data.Aeson.Types.ToJSON..= messageContentTextObjectText obj] : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "text"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["text" Data.Aeson.Types.ToJSON..= messageContentTextObjectText obj] : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "text"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON MessageContentTextObject
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "MessageContentTextObject" (\obj -> GHC.Base.pure MessageContentTextObject GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "text"))}
-- | Create a new 'MessageContentTextObject' with all required fields.
mkMessageContentTextObject :: MessageContentTextObjectText' -- ^ 'messageContentTextObjectText'
  -> MessageContentTextObject
mkMessageContentTextObject messageContentTextObjectText = MessageContentTextObject{messageContentTextObjectText = messageContentTextObjectText}
-- | Defines the object schema located at @components.schemas.MessageContentTextObject.properties.text@ in the specification.
-- 
-- 
data MessageContentTextObjectText' = MessageContentTextObjectText' {
  -- | annotations
  messageContentTextObjectText'Annotations :: ([MessageContentTextObjectText'Annotations'Variants])
  -- | value: The data that makes up the text.
  , messageContentTextObjectText'Value :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON MessageContentTextObjectText'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["annotations" Data.Aeson.Types.ToJSON..= messageContentTextObjectText'Annotations obj] : ["value" Data.Aeson.Types.ToJSON..= messageContentTextObjectText'Value obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["annotations" Data.Aeson.Types.ToJSON..= messageContentTextObjectText'Annotations obj] : ["value" Data.Aeson.Types.ToJSON..= messageContentTextObjectText'Value obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON MessageContentTextObjectText'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "MessageContentTextObjectText'" (\obj -> (GHC.Base.pure MessageContentTextObjectText' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "annotations")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "value"))}
-- | Create a new 'MessageContentTextObjectText'' with all required fields.
mkMessageContentTextObjectText' :: [MessageContentTextObjectText'Annotations'Variants] -- ^ 'messageContentTextObjectText'Annotations'
  -> Data.Text.Internal.Text -- ^ 'messageContentTextObjectText'Value'
  -> MessageContentTextObjectText'
mkMessageContentTextObjectText' messageContentTextObjectText'Annotations messageContentTextObjectText'Value = MessageContentTextObjectText'{messageContentTextObjectText'Annotations = messageContentTextObjectText'Annotations,
                                                                                                                                            messageContentTextObjectText'Value = messageContentTextObjectText'Value}
-- | Defines the oneOf schema located at @components.schemas.MessageContentTextObject.properties.text.properties.annotations.items.oneOf@ in the specification.
-- 
-- 
data MessageContentTextObjectText'Annotations'Variants =
   MessageContentTextObjectText'Annotations'MessageContentTextAnnotationsFileCitationObject MessageContentTextAnnotationsFileCitationObject
  | MessageContentTextObjectText'Annotations'MessageContentTextAnnotationsFilePathObject MessageContentTextAnnotationsFilePathObject
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON MessageContentTextObjectText'Annotations'Variants
    where {toJSON (MessageContentTextObjectText'Annotations'MessageContentTextAnnotationsFileCitationObject a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (MessageContentTextObjectText'Annotations'MessageContentTextAnnotationsFilePathObject a) = Data.Aeson.Types.ToJSON.toJSON a}
instance Data.Aeson.Types.FromJSON.FromJSON MessageContentTextObjectText'Annotations'Variants
    where {parseJSON val = case (MessageContentTextObjectText'Annotations'MessageContentTextAnnotationsFileCitationObject Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((MessageContentTextObjectText'Annotations'MessageContentTextAnnotationsFilePathObject Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                           {Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a;
                            Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a}}
