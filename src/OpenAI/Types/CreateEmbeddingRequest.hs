-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema CreateEmbeddingRequest
module OpenAI.Types.CreateEmbeddingRequest where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified OpenAI.Common
import OpenAI.TypeAlias

-- | Defines the object schema located at @components.schemas.CreateEmbeddingRequest@ in the specification.
-- 
-- 
data CreateEmbeddingRequest = CreateEmbeddingRequest {
  -- | dimensions: The number of dimensions the resulting output embeddings should have. Only supported in \`text-embedding-3\` and later models.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 1.0
  createEmbeddingRequestDimensions :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | encoding_format: The format to return the embeddings in. Can be either \`float\` or [\`base64\`](https:\/\/pypi.org\/project\/pybase64\/).
  , createEmbeddingRequestEncodingFormat :: (GHC.Maybe.Maybe CreateEmbeddingRequestEncodingFormat')
  -- | input: Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for \`text-embedding-ada-002\`), cannot be an empty string, and any array must be 2048 dimensions or less. [Example Python code](https:\/\/cookbook.openai.com\/examples\/how_to_count_tokens_with_tiktoken) for counting tokens.
  , createEmbeddingRequestInput :: CreateEmbeddingRequestInput'Variants
  -- | model: ID of the model to use. You can use the [List models](\/docs\/api-reference\/models\/list) API to see all of your available models, or see our [Model overview](\/docs\/models\/overview) for descriptions of them.
  , createEmbeddingRequestModel :: CreateEmbeddingRequestModel'Variants
  -- | user: A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](\/docs\/guides\/safety-best-practices\/end-user-ids).
  , createEmbeddingRequestUser :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateEmbeddingRequest
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dimensions" Data.Aeson.Types.ToJSON..=)) (createEmbeddingRequestDimensions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("encoding_format" Data.Aeson.Types.ToJSON..=)) (createEmbeddingRequestEncodingFormat obj) : ["input" Data.Aeson.Types.ToJSON..= createEmbeddingRequestInput obj] : ["model" Data.Aeson.Types.ToJSON..= createEmbeddingRequestModel obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user" Data.Aeson.Types.ToJSON..=)) (createEmbeddingRequestUser obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dimensions" Data.Aeson.Types.ToJSON..=)) (createEmbeddingRequestDimensions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("encoding_format" Data.Aeson.Types.ToJSON..=)) (createEmbeddingRequestEncodingFormat obj) : ["input" Data.Aeson.Types.ToJSON..= createEmbeddingRequestInput obj] : ["model" Data.Aeson.Types.ToJSON..= createEmbeddingRequestModel obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user" Data.Aeson.Types.ToJSON..=)) (createEmbeddingRequestUser obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON CreateEmbeddingRequest
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateEmbeddingRequest" (\obj -> ((((GHC.Base.pure CreateEmbeddingRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "dimensions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "encoding_format")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "input")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "model")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "user"))}
-- | Create a new 'CreateEmbeddingRequest' with all required fields.
mkCreateEmbeddingRequest :: CreateEmbeddingRequestInput'Variants -- ^ 'createEmbeddingRequestInput'
  -> CreateEmbeddingRequestModel'Variants -- ^ 'createEmbeddingRequestModel'
  -> CreateEmbeddingRequest
mkCreateEmbeddingRequest createEmbeddingRequestInput createEmbeddingRequestModel = CreateEmbeddingRequest{createEmbeddingRequestDimensions = GHC.Maybe.Nothing,
                                                                                                          createEmbeddingRequestEncodingFormat = GHC.Maybe.Nothing,
                                                                                                          createEmbeddingRequestInput = createEmbeddingRequestInput,
                                                                                                          createEmbeddingRequestModel = createEmbeddingRequestModel,
                                                                                                          createEmbeddingRequestUser = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.CreateEmbeddingRequest.properties.encoding_format@ in the specification.
-- 
-- The format to return the embeddings in. Can be either \`float\` or [\`base64\`](https:\/\/pypi.org\/project\/pybase64\/).
data CreateEmbeddingRequestEncodingFormat' =
   CreateEmbeddingRequestEncodingFormat'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | CreateEmbeddingRequestEncodingFormat'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | CreateEmbeddingRequestEncodingFormat'EnumFloat -- ^ Represents the JSON value @"float"@
  | CreateEmbeddingRequestEncodingFormat'EnumBase64 -- ^ Represents the JSON value @"base64"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateEmbeddingRequestEncodingFormat'
    where {toJSON (CreateEmbeddingRequestEncodingFormat'Other val) = val;
           toJSON (CreateEmbeddingRequestEncodingFormat'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (CreateEmbeddingRequestEncodingFormat'EnumFloat) = "float";
           toJSON (CreateEmbeddingRequestEncodingFormat'EnumBase64) = "base64"}
instance Data.Aeson.Types.FromJSON.FromJSON CreateEmbeddingRequestEncodingFormat'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "float" -> CreateEmbeddingRequestEncodingFormat'EnumFloat
                                             | val GHC.Classes.== "base64" -> CreateEmbeddingRequestEncodingFormat'EnumBase64
                                             | GHC.Base.otherwise -> CreateEmbeddingRequestEncodingFormat'Other val)}
-- | Defines the oneOf schema located at @components.schemas.CreateEmbeddingRequest.properties.input.oneOf@ in the specification.
-- 
-- Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for \`text-embedding-ada-002\`), cannot be an empty string, and any array must be 2048 dimensions or less. [Example Python code](https:\/\/cookbook.openai.com\/examples\/how_to_count_tokens_with_tiktoken) for counting tokens.
data CreateEmbeddingRequestInput'Variants =
   CreateEmbeddingRequestInput'Text Data.Text.Internal.Text
  | CreateEmbeddingRequestInput'ListTText ([Data.Text.Internal.Text])
  | CreateEmbeddingRequestInput'ListTInt ([GHC.Types.Int])
  | CreateEmbeddingRequestInput'ListTListTInt ([[GHC.Types.Int]])
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateEmbeddingRequestInput'Variants
    where {toJSON (CreateEmbeddingRequestInput'Text a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (CreateEmbeddingRequestInput'ListTText a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (CreateEmbeddingRequestInput'ListTInt a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (CreateEmbeddingRequestInput'ListTListTInt a) = Data.Aeson.Types.ToJSON.toJSON a}
instance Data.Aeson.Types.FromJSON.FromJSON CreateEmbeddingRequestInput'Variants
    where {parseJSON val = case (CreateEmbeddingRequestInput'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((CreateEmbeddingRequestInput'ListTText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((CreateEmbeddingRequestInput'ListTInt Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((CreateEmbeddingRequestInput'ListTListTInt Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched"))) of
                           {Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a;
                            Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a}}
-- | Defines the enum schema located at @components.schemas.CreateEmbeddingRequest.properties.model.anyOf@ in the specification.
-- 
-- 
data CreateEmbeddingRequestModel'OneOf2 =
   CreateEmbeddingRequestModel'OneOf2Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | CreateEmbeddingRequestModel'OneOf2Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | CreateEmbeddingRequestModel'OneOf2EnumTextEmbeddingAda_002 -- ^ Represents the JSON value @"text-embedding-ada-002"@
  | CreateEmbeddingRequestModel'OneOf2EnumTextEmbedding_3Small -- ^ Represents the JSON value @"text-embedding-3-small"@
  | CreateEmbeddingRequestModel'OneOf2EnumTextEmbedding_3Large -- ^ Represents the JSON value @"text-embedding-3-large"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateEmbeddingRequestModel'OneOf2
    where {toJSON (CreateEmbeddingRequestModel'OneOf2Other val) = val;
           toJSON (CreateEmbeddingRequestModel'OneOf2Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (CreateEmbeddingRequestModel'OneOf2EnumTextEmbeddingAda_002) = "text-embedding-ada-002";
           toJSON (CreateEmbeddingRequestModel'OneOf2EnumTextEmbedding_3Small) = "text-embedding-3-small";
           toJSON (CreateEmbeddingRequestModel'OneOf2EnumTextEmbedding_3Large) = "text-embedding-3-large"}
instance Data.Aeson.Types.FromJSON.FromJSON CreateEmbeddingRequestModel'OneOf2
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "text-embedding-ada-002" -> CreateEmbeddingRequestModel'OneOf2EnumTextEmbeddingAda_002
                                             | val GHC.Classes.== "text-embedding-3-small" -> CreateEmbeddingRequestModel'OneOf2EnumTextEmbedding_3Small
                                             | val GHC.Classes.== "text-embedding-3-large" -> CreateEmbeddingRequestModel'OneOf2EnumTextEmbedding_3Large
                                             | GHC.Base.otherwise -> CreateEmbeddingRequestModel'OneOf2Other val)}
-- | Defines the oneOf schema located at @components.schemas.CreateEmbeddingRequest.properties.model.anyOf@ in the specification.
-- 
-- ID of the model to use. You can use the [List models](\/docs\/api-reference\/models\/list) API to see all of your available models, or see our [Model overview](\/docs\/models\/overview) for descriptions of them.
data CreateEmbeddingRequestModel'Variants =
   CreateEmbeddingRequestModel'Text Data.Text.Internal.Text
  | CreateEmbeddingRequestModel'CreateEmbeddingRequestModel'OneOf2 CreateEmbeddingRequestModel'OneOf2
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateEmbeddingRequestModel'Variants
    where {toJSON (CreateEmbeddingRequestModel'Text a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (CreateEmbeddingRequestModel'CreateEmbeddingRequestModel'OneOf2 a) = Data.Aeson.Types.ToJSON.toJSON a}
instance Data.Aeson.Types.FromJSON.FromJSON CreateEmbeddingRequestModel'Variants
    where {parseJSON val = case (CreateEmbeddingRequestModel'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((CreateEmbeddingRequestModel'CreateEmbeddingRequestModel'OneOf2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                           {Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a;
                            Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a}}
