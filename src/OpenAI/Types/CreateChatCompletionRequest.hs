-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema CreateChatCompletionRequest
module OpenAI.Types.CreateChatCompletionRequest where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified OpenAI.Common
import OpenAI.TypeAlias
import {-# SOURCE #-} OpenAI.Types.ChatCompletionFunctionCallOption
import {-# SOURCE #-} OpenAI.Types.ChatCompletionFunctions
import {-# SOURCE #-} OpenAI.Types.ChatCompletionRequestMessage
import {-# SOURCE #-} OpenAI.Types.ChatCompletionTool
import {-# SOURCE #-} OpenAI.Types.ChatCompletionToolChoiceOption

-- | Defines the object schema located at @components.schemas.CreateChatCompletionRequest@ in the specification.
-- 
-- 
data CreateChatCompletionRequest = CreateChatCompletionRequest {
  -- | frequency_penalty: Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model\'s likelihood to repeat the same line verbatim.
  -- 
  -- [See more information about frequency and presence penalties.](\/docs\/guides\/text-generation\/parameter-details)
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 2.0
  -- * Minimum  of -2.0
  createChatCompletionRequestFrequencyPenalty :: (GHC.Maybe.Maybe (OpenAI.Common.Nullable GHC.Types.Double))
  -- | function_call: Deprecated in favor of \`tool_choice\`.
  -- 
  -- Controls which (if any) function is called by the model.
  -- \`none\` means the model will not call a function and instead generates a message.
  -- \`auto\` means the model can pick between generating a message or calling a function.
  -- Specifying a particular function via \`{\"name\": \"my_function\"}\` forces the model to call that function.
  -- 
  -- \`none\` is the default when no functions are present. \`auto\` is the default if functions are present.
  , createChatCompletionRequestFunctionCall :: (GHC.Maybe.Maybe CreateChatCompletionRequestFunctionCall'Variants)
  -- | functions: Deprecated in favor of \`tools\`.
  -- 
  -- A list of functions the model may generate JSON inputs for.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Must have a maximum of 128 items
  -- * Must have a minimum of 1 items
  , createChatCompletionRequestFunctions :: (GHC.Maybe.Maybe ([ChatCompletionFunctions]))
  -- | logit_bias: Modify the likelihood of specified tokens appearing in the completion.
  -- 
  -- Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
  , createChatCompletionRequestLogitBias :: (GHC.Maybe.Maybe (OpenAI.Common.Nullable Data.Aeson.Types.Internal.Object))
  -- | logprobs: Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the \`content\` of \`message\`. This option is currently not available on the \`gpt-4-vision-preview\` model.
  , createChatCompletionRequestLogprobs :: (GHC.Maybe.Maybe (OpenAI.Common.Nullable GHC.Types.Bool))
  -- | max_tokens: The maximum number of [tokens](\/tokenizer) that can be generated in the chat completion.
  -- 
  -- The total length of input tokens and generated tokens is limited by the model\'s context length. [Example Python code](https:\/\/cookbook.openai.com\/examples\/how_to_count_tokens_with_tiktoken) for counting tokens.
  , createChatCompletionRequestMaxTokens :: (GHC.Maybe.Maybe (OpenAI.Common.Nullable GHC.Types.Int))
  -- | messages: A list of messages comprising the conversation so far. [Example Python code](https:\/\/cookbook.openai.com\/examples\/how_to_format_inputs_to_chatgpt_models).
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  , createChatCompletionRequestMessages :: ([ChatCompletionRequestMessage])
  -- | model: ID of the model to use. See the [model endpoint compatibility](\/docs\/models\/model-endpoint-compatibility) table for details on which models work with the Chat API.
  , createChatCompletionRequestModel :: CreateChatCompletionRequestModel'Variants
  -- | n: How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep \`n\` as \`1\` to minimize costs.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 128.0
  -- * Minimum  of 1.0
  , createChatCompletionRequestN :: (GHC.Maybe.Maybe (OpenAI.Common.Nullable GHC.Types.Int))
  -- | presence_penalty: Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model\'s likelihood to talk about new topics.
  -- 
  -- [See more information about frequency and presence penalties.](\/docs\/guides\/text-generation\/parameter-details)
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 2.0
  -- * Minimum  of -2.0
  , createChatCompletionRequestPresencePenalty :: (GHC.Maybe.Maybe (OpenAI.Common.Nullable GHC.Types.Double))
  -- | response_format: An object specifying the format that the model must output. Compatible with [GPT-4 Turbo](\/docs\/models\/gpt-4-and-gpt-4-turbo) and all GPT-3.5 Turbo models newer than \`gpt-3.5-turbo-1106\`.
  -- 
  -- Setting to \`{ \"type\": \"json_object\" }\` enables JSON mode, which guarantees the message the model generates is valid JSON.
  -- 
  -- **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if \`finish_reason=\"length\"\`, which indicates the generation exceeded \`max_tokens\` or the conversation exceeded the max context length.
  , createChatCompletionRequestResponseFormat :: (GHC.Maybe.Maybe CreateChatCompletionRequestResponseFormat')
  -- | seed: This feature is in Beta.
  -- If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same \`seed\` and parameters should return the same result.
  -- Determinism is not guaranteed, and you should refer to the \`system_fingerprint\` response parameter to monitor changes in the backend.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 9.223372e18
  -- * Minimum  of -9.223372e18
  , createChatCompletionRequestSeed :: (GHC.Maybe.Maybe (OpenAI.Common.Nullable GHC.Types.Int))
  -- | stop: Up to 4 sequences where the API will stop generating further tokens.
  , createChatCompletionRequestStop :: (GHC.Maybe.Maybe CreateChatCompletionRequestStop'Variants)
  -- | stream: If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Server-sent_events\/Using_server-sent_events\#Event_stream_format) as they become available, with the stream terminated by a \`data: [DONE]\` message. [Example Python code](https:\/\/cookbook.openai.com\/examples\/how_to_stream_completions).
  , createChatCompletionRequestStream :: (GHC.Maybe.Maybe (OpenAI.Common.Nullable GHC.Types.Bool))
  -- | temperature: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
  -- 
  -- We generally recommend altering this or \`top_p\` but not both.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 2.0
  -- * Minimum  of 0.0
  , createChatCompletionRequestTemperature :: (GHC.Maybe.Maybe (OpenAI.Common.Nullable GHC.Types.Double))
  -- | tool_choice: Controls which (if any) function is called by the model.
  -- \`none\` means the model will not call a function and instead generates a message.
  -- \`auto\` means the model can pick between generating a message or calling a function.
  -- Specifying a particular function via \`{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}\` forces the model to call that function.
  -- 
  -- \`none\` is the default when no functions are present. \`auto\` is the default if functions are present.
  , createChatCompletionRequestToolChoice :: (GHC.Maybe.Maybe ChatCompletionToolChoiceOption)
  -- | tools: A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for.
  , createChatCompletionRequestTools :: (GHC.Maybe.Maybe ([ChatCompletionTool]))
  -- | top_logprobs: An integer between 0 and 5 specifying the number of most likely tokens to return at each token position, each with an associated log probability. \`logprobs\` must be set to \`true\` if this parameter is used.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 5.0
  -- * Minimum  of 0.0
  , createChatCompletionRequestTopLogprobs :: (GHC.Maybe.Maybe (OpenAI.Common.Nullable GHC.Types.Int))
  -- | top_p: An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
  -- 
  -- We generally recommend altering this or \`temperature\` but not both.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 1.0
  -- * Minimum  of 0.0
  , createChatCompletionRequestTopP :: (GHC.Maybe.Maybe (OpenAI.Common.Nullable GHC.Types.Double))
  -- | user: A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](\/docs\/guides\/safety-best-practices\/end-user-ids).
  , createChatCompletionRequestUser :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateChatCompletionRequest
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("frequency_penalty" Data.Aeson.Types.ToJSON..=)) (createChatCompletionRequestFrequencyPenalty obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("function_call" Data.Aeson.Types.ToJSON..=)) (createChatCompletionRequestFunctionCall obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("functions" Data.Aeson.Types.ToJSON..=)) (createChatCompletionRequestFunctions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("logit_bias" Data.Aeson.Types.ToJSON..=)) (createChatCompletionRequestLogitBias obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("logprobs" Data.Aeson.Types.ToJSON..=)) (createChatCompletionRequestLogprobs obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("max_tokens" Data.Aeson.Types.ToJSON..=)) (createChatCompletionRequestMaxTokens obj) : ["messages" Data.Aeson.Types.ToJSON..= createChatCompletionRequestMessages obj] : ["model" Data.Aeson.Types.ToJSON..= createChatCompletionRequestModel obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("n" Data.Aeson.Types.ToJSON..=)) (createChatCompletionRequestN obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("presence_penalty" Data.Aeson.Types.ToJSON..=)) (createChatCompletionRequestPresencePenalty obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("response_format" Data.Aeson.Types.ToJSON..=)) (createChatCompletionRequestResponseFormat obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("seed" Data.Aeson.Types.ToJSON..=)) (createChatCompletionRequestSeed obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("stop" Data.Aeson.Types.ToJSON..=)) (createChatCompletionRequestStop obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("stream" Data.Aeson.Types.ToJSON..=)) (createChatCompletionRequestStream obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("temperature" Data.Aeson.Types.ToJSON..=)) (createChatCompletionRequestTemperature obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tool_choice" Data.Aeson.Types.ToJSON..=)) (createChatCompletionRequestToolChoice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tools" Data.Aeson.Types.ToJSON..=)) (createChatCompletionRequestTools obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("top_logprobs" Data.Aeson.Types.ToJSON..=)) (createChatCompletionRequestTopLogprobs obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("top_p" Data.Aeson.Types.ToJSON..=)) (createChatCompletionRequestTopP obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user" Data.Aeson.Types.ToJSON..=)) (createChatCompletionRequestUser obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("frequency_penalty" Data.Aeson.Types.ToJSON..=)) (createChatCompletionRequestFrequencyPenalty obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("function_call" Data.Aeson.Types.ToJSON..=)) (createChatCompletionRequestFunctionCall obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("functions" Data.Aeson.Types.ToJSON..=)) (createChatCompletionRequestFunctions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("logit_bias" Data.Aeson.Types.ToJSON..=)) (createChatCompletionRequestLogitBias obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("logprobs" Data.Aeson.Types.ToJSON..=)) (createChatCompletionRequestLogprobs obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("max_tokens" Data.Aeson.Types.ToJSON..=)) (createChatCompletionRequestMaxTokens obj) : ["messages" Data.Aeson.Types.ToJSON..= createChatCompletionRequestMessages obj] : ["model" Data.Aeson.Types.ToJSON..= createChatCompletionRequestModel obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("n" Data.Aeson.Types.ToJSON..=)) (createChatCompletionRequestN obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("presence_penalty" Data.Aeson.Types.ToJSON..=)) (createChatCompletionRequestPresencePenalty obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("response_format" Data.Aeson.Types.ToJSON..=)) (createChatCompletionRequestResponseFormat obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("seed" Data.Aeson.Types.ToJSON..=)) (createChatCompletionRequestSeed obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("stop" Data.Aeson.Types.ToJSON..=)) (createChatCompletionRequestStop obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("stream" Data.Aeson.Types.ToJSON..=)) (createChatCompletionRequestStream obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("temperature" Data.Aeson.Types.ToJSON..=)) (createChatCompletionRequestTemperature obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tool_choice" Data.Aeson.Types.ToJSON..=)) (createChatCompletionRequestToolChoice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tools" Data.Aeson.Types.ToJSON..=)) (createChatCompletionRequestTools obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("top_logprobs" Data.Aeson.Types.ToJSON..=)) (createChatCompletionRequestTopLogprobs obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("top_p" Data.Aeson.Types.ToJSON..=)) (createChatCompletionRequestTopP obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user" Data.Aeson.Types.ToJSON..=)) (createChatCompletionRequestUser obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON CreateChatCompletionRequest
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateChatCompletionRequest" (\obj -> (((((((((((((((((((GHC.Base.pure CreateChatCompletionRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "frequency_penalty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "function_call")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "functions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "logit_bias")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "logprobs")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "max_tokens")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "messages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "model")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "n")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "presence_penalty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "response_format")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "seed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "stop")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "stream")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "temperature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tool_choice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tools")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "top_logprobs")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "top_p")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "user"))}
-- | Create a new 'CreateChatCompletionRequest' with all required fields.
mkCreateChatCompletionRequest :: [ChatCompletionRequestMessage] -- ^ 'createChatCompletionRequestMessages'
  -> CreateChatCompletionRequestModel'Variants -- ^ 'createChatCompletionRequestModel'
  -> CreateChatCompletionRequest
mkCreateChatCompletionRequest createChatCompletionRequestMessages createChatCompletionRequestModel = CreateChatCompletionRequest{createChatCompletionRequestFrequencyPenalty = GHC.Maybe.Nothing,
                                                                                                                                 createChatCompletionRequestFunctionCall = GHC.Maybe.Nothing,
                                                                                                                                 createChatCompletionRequestFunctions = GHC.Maybe.Nothing,
                                                                                                                                 createChatCompletionRequestLogitBias = GHC.Maybe.Nothing,
                                                                                                                                 createChatCompletionRequestLogprobs = GHC.Maybe.Nothing,
                                                                                                                                 createChatCompletionRequestMaxTokens = GHC.Maybe.Nothing,
                                                                                                                                 createChatCompletionRequestMessages = createChatCompletionRequestMessages,
                                                                                                                                 createChatCompletionRequestModel = createChatCompletionRequestModel,
                                                                                                                                 createChatCompletionRequestN = GHC.Maybe.Nothing,
                                                                                                                                 createChatCompletionRequestPresencePenalty = GHC.Maybe.Nothing,
                                                                                                                                 createChatCompletionRequestResponseFormat = GHC.Maybe.Nothing,
                                                                                                                                 createChatCompletionRequestSeed = GHC.Maybe.Nothing,
                                                                                                                                 createChatCompletionRequestStop = GHC.Maybe.Nothing,
                                                                                                                                 createChatCompletionRequestStream = GHC.Maybe.Nothing,
                                                                                                                                 createChatCompletionRequestTemperature = GHC.Maybe.Nothing,
                                                                                                                                 createChatCompletionRequestToolChoice = GHC.Maybe.Nothing,
                                                                                                                                 createChatCompletionRequestTools = GHC.Maybe.Nothing,
                                                                                                                                 createChatCompletionRequestTopLogprobs = GHC.Maybe.Nothing,
                                                                                                                                 createChatCompletionRequestTopP = GHC.Maybe.Nothing,
                                                                                                                                 createChatCompletionRequestUser = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.CreateChatCompletionRequest.properties.function_call.oneOf@ in the specification.
-- 
-- \`none\` means the model will not call a function and instead generates a message. \`auto\` means the model can pick between generating a message or calling a function.
data CreateChatCompletionRequestFunctionCall'OneOf1 =
   CreateChatCompletionRequestFunctionCall'OneOf1Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | CreateChatCompletionRequestFunctionCall'OneOf1Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | CreateChatCompletionRequestFunctionCall'OneOf1EnumNone -- ^ Represents the JSON value @"none"@
  | CreateChatCompletionRequestFunctionCall'OneOf1EnumAuto -- ^ Represents the JSON value @"auto"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateChatCompletionRequestFunctionCall'OneOf1
    where {toJSON (CreateChatCompletionRequestFunctionCall'OneOf1Other val) = val;
           toJSON (CreateChatCompletionRequestFunctionCall'OneOf1Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (CreateChatCompletionRequestFunctionCall'OneOf1EnumNone) = "none";
           toJSON (CreateChatCompletionRequestFunctionCall'OneOf1EnumAuto) = "auto"}
instance Data.Aeson.Types.FromJSON.FromJSON CreateChatCompletionRequestFunctionCall'OneOf1
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "none" -> CreateChatCompletionRequestFunctionCall'OneOf1EnumNone
                                             | val GHC.Classes.== "auto" -> CreateChatCompletionRequestFunctionCall'OneOf1EnumAuto
                                             | GHC.Base.otherwise -> CreateChatCompletionRequestFunctionCall'OneOf1Other val)}
-- | Defines the oneOf schema located at @components.schemas.CreateChatCompletionRequest.properties.function_call.oneOf@ in the specification.
-- 
-- Deprecated in favor of \`tool_choice\`.
-- 
-- Controls which (if any) function is called by the model.
-- \`none\` means the model will not call a function and instead generates a message.
-- \`auto\` means the model can pick between generating a message or calling a function.
-- Specifying a particular function via \`{\"name\": \"my_function\"}\` forces the model to call that function.
-- 
-- \`none\` is the default when no functions are present. \`auto\` is the default if functions are present.
data CreateChatCompletionRequestFunctionCall'Variants =
   CreateChatCompletionRequestFunctionCall'CreateChatCompletionRequestFunctionCall'OneOf1 CreateChatCompletionRequestFunctionCall'OneOf1
  | CreateChatCompletionRequestFunctionCall'ChatCompletionFunctionCallOption ChatCompletionFunctionCallOption
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateChatCompletionRequestFunctionCall'Variants
    where {toJSON (CreateChatCompletionRequestFunctionCall'CreateChatCompletionRequestFunctionCall'OneOf1 a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (CreateChatCompletionRequestFunctionCall'ChatCompletionFunctionCallOption a) = Data.Aeson.Types.ToJSON.toJSON a}
instance Data.Aeson.Types.FromJSON.FromJSON CreateChatCompletionRequestFunctionCall'Variants
    where {parseJSON val = case (CreateChatCompletionRequestFunctionCall'CreateChatCompletionRequestFunctionCall'OneOf1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((CreateChatCompletionRequestFunctionCall'ChatCompletionFunctionCallOption Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                           {Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a;
                            Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a}}
-- | Defines the enum schema located at @components.schemas.CreateChatCompletionRequest.properties.model.anyOf@ in the specification.
-- 
-- 
data CreateChatCompletionRequestModel'OneOf2 =
   CreateChatCompletionRequestModel'OneOf2Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | CreateChatCompletionRequestModel'OneOf2Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | CreateChatCompletionRequestModel'OneOf2EnumGpt_4_0125Preview -- ^ Represents the JSON value @"gpt-4-0125-preview"@
  | CreateChatCompletionRequestModel'OneOf2EnumGpt_4TurboPreview -- ^ Represents the JSON value @"gpt-4-turbo-preview"@
  | CreateChatCompletionRequestModel'OneOf2EnumGpt_4_1106Preview -- ^ Represents the JSON value @"gpt-4-1106-preview"@
  | CreateChatCompletionRequestModel'OneOf2EnumGpt_4VisionPreview -- ^ Represents the JSON value @"gpt-4-vision-preview"@
  | CreateChatCompletionRequestModel'OneOf2EnumGpt_4 -- ^ Represents the JSON value @"gpt-4"@
  | CreateChatCompletionRequestModel'OneOf2EnumGpt_4_0314 -- ^ Represents the JSON value @"gpt-4-0314"@
  | CreateChatCompletionRequestModel'OneOf2EnumGpt_4_0613 -- ^ Represents the JSON value @"gpt-4-0613"@
  | CreateChatCompletionRequestModel'OneOf2EnumGpt_4_32k -- ^ Represents the JSON value @"gpt-4-32k"@
  | CreateChatCompletionRequestModel'OneOf2EnumGpt_4_32k_0314 -- ^ Represents the JSON value @"gpt-4-32k-0314"@
  | CreateChatCompletionRequestModel'OneOf2EnumGpt_4_32k_0613 -- ^ Represents the JSON value @"gpt-4-32k-0613"@
  | CreateChatCompletionRequestModel'OneOf2EnumGpt_3'5Turbo -- ^ Represents the JSON value @"gpt-3.5-turbo"@
  | CreateChatCompletionRequestModel'OneOf2EnumGpt_3'5Turbo_16k -- ^ Represents the JSON value @"gpt-3.5-turbo-16k"@
  | CreateChatCompletionRequestModel'OneOf2EnumGpt_3'5Turbo_0301 -- ^ Represents the JSON value @"gpt-3.5-turbo-0301"@
  | CreateChatCompletionRequestModel'OneOf2EnumGpt_3'5Turbo_0613 -- ^ Represents the JSON value @"gpt-3.5-turbo-0613"@
  | CreateChatCompletionRequestModel'OneOf2EnumGpt_3'5Turbo_1106 -- ^ Represents the JSON value @"gpt-3.5-turbo-1106"@
  | CreateChatCompletionRequestModel'OneOf2EnumGpt_3'5Turbo_0125 -- ^ Represents the JSON value @"gpt-3.5-turbo-0125"@
  | CreateChatCompletionRequestModel'OneOf2EnumGpt_3'5Turbo_16k_0613 -- ^ Represents the JSON value @"gpt-3.5-turbo-16k-0613"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateChatCompletionRequestModel'OneOf2
    where {toJSON (CreateChatCompletionRequestModel'OneOf2Other val) = val;
           toJSON (CreateChatCompletionRequestModel'OneOf2Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (CreateChatCompletionRequestModel'OneOf2EnumGpt_4_0125Preview) = "gpt-4-0125-preview";
           toJSON (CreateChatCompletionRequestModel'OneOf2EnumGpt_4TurboPreview) = "gpt-4-turbo-preview";
           toJSON (CreateChatCompletionRequestModel'OneOf2EnumGpt_4_1106Preview) = "gpt-4-1106-preview";
           toJSON (CreateChatCompletionRequestModel'OneOf2EnumGpt_4VisionPreview) = "gpt-4-vision-preview";
           toJSON (CreateChatCompletionRequestModel'OneOf2EnumGpt_4) = "gpt-4";
           toJSON (CreateChatCompletionRequestModel'OneOf2EnumGpt_4_0314) = "gpt-4-0314";
           toJSON (CreateChatCompletionRequestModel'OneOf2EnumGpt_4_0613) = "gpt-4-0613";
           toJSON (CreateChatCompletionRequestModel'OneOf2EnumGpt_4_32k) = "gpt-4-32k";
           toJSON (CreateChatCompletionRequestModel'OneOf2EnumGpt_4_32k_0314) = "gpt-4-32k-0314";
           toJSON (CreateChatCompletionRequestModel'OneOf2EnumGpt_4_32k_0613) = "gpt-4-32k-0613";
           toJSON (CreateChatCompletionRequestModel'OneOf2EnumGpt_3'5Turbo) = "gpt-3.5-turbo";
           toJSON (CreateChatCompletionRequestModel'OneOf2EnumGpt_3'5Turbo_16k) = "gpt-3.5-turbo-16k";
           toJSON (CreateChatCompletionRequestModel'OneOf2EnumGpt_3'5Turbo_0301) = "gpt-3.5-turbo-0301";
           toJSON (CreateChatCompletionRequestModel'OneOf2EnumGpt_3'5Turbo_0613) = "gpt-3.5-turbo-0613";
           toJSON (CreateChatCompletionRequestModel'OneOf2EnumGpt_3'5Turbo_1106) = "gpt-3.5-turbo-1106";
           toJSON (CreateChatCompletionRequestModel'OneOf2EnumGpt_3'5Turbo_0125) = "gpt-3.5-turbo-0125";
           toJSON (CreateChatCompletionRequestModel'OneOf2EnumGpt_3'5Turbo_16k_0613) = "gpt-3.5-turbo-16k-0613"}
instance Data.Aeson.Types.FromJSON.FromJSON CreateChatCompletionRequestModel'OneOf2
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "gpt-4-0125-preview" -> CreateChatCompletionRequestModel'OneOf2EnumGpt_4_0125Preview
                                             | val GHC.Classes.== "gpt-4-turbo-preview" -> CreateChatCompletionRequestModel'OneOf2EnumGpt_4TurboPreview
                                             | val GHC.Classes.== "gpt-4-1106-preview" -> CreateChatCompletionRequestModel'OneOf2EnumGpt_4_1106Preview
                                             | val GHC.Classes.== "gpt-4-vision-preview" -> CreateChatCompletionRequestModel'OneOf2EnumGpt_4VisionPreview
                                             | val GHC.Classes.== "gpt-4" -> CreateChatCompletionRequestModel'OneOf2EnumGpt_4
                                             | val GHC.Classes.== "gpt-4-0314" -> CreateChatCompletionRequestModel'OneOf2EnumGpt_4_0314
                                             | val GHC.Classes.== "gpt-4-0613" -> CreateChatCompletionRequestModel'OneOf2EnumGpt_4_0613
                                             | val GHC.Classes.== "gpt-4-32k" -> CreateChatCompletionRequestModel'OneOf2EnumGpt_4_32k
                                             | val GHC.Classes.== "gpt-4-32k-0314" -> CreateChatCompletionRequestModel'OneOf2EnumGpt_4_32k_0314
                                             | val GHC.Classes.== "gpt-4-32k-0613" -> CreateChatCompletionRequestModel'OneOf2EnumGpt_4_32k_0613
                                             | val GHC.Classes.== "gpt-3.5-turbo" -> CreateChatCompletionRequestModel'OneOf2EnumGpt_3'5Turbo
                                             | val GHC.Classes.== "gpt-3.5-turbo-16k" -> CreateChatCompletionRequestModel'OneOf2EnumGpt_3'5Turbo_16k
                                             | val GHC.Classes.== "gpt-3.5-turbo-0301" -> CreateChatCompletionRequestModel'OneOf2EnumGpt_3'5Turbo_0301
                                             | val GHC.Classes.== "gpt-3.5-turbo-0613" -> CreateChatCompletionRequestModel'OneOf2EnumGpt_3'5Turbo_0613
                                             | val GHC.Classes.== "gpt-3.5-turbo-1106" -> CreateChatCompletionRequestModel'OneOf2EnumGpt_3'5Turbo_1106
                                             | val GHC.Classes.== "gpt-3.5-turbo-0125" -> CreateChatCompletionRequestModel'OneOf2EnumGpt_3'5Turbo_0125
                                             | val GHC.Classes.== "gpt-3.5-turbo-16k-0613" -> CreateChatCompletionRequestModel'OneOf2EnumGpt_3'5Turbo_16k_0613
                                             | GHC.Base.otherwise -> CreateChatCompletionRequestModel'OneOf2Other val)}
-- | Defines the oneOf schema located at @components.schemas.CreateChatCompletionRequest.properties.model.anyOf@ in the specification.
-- 
-- ID of the model to use. See the [model endpoint compatibility](\/docs\/models\/model-endpoint-compatibility) table for details on which models work with the Chat API.
data CreateChatCompletionRequestModel'Variants =
   CreateChatCompletionRequestModel'Text Data.Text.Internal.Text
  | CreateChatCompletionRequestModel'CreateChatCompletionRequestModel'OneOf2 CreateChatCompletionRequestModel'OneOf2
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateChatCompletionRequestModel'Variants
    where {toJSON (CreateChatCompletionRequestModel'Text a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (CreateChatCompletionRequestModel'CreateChatCompletionRequestModel'OneOf2 a) = Data.Aeson.Types.ToJSON.toJSON a}
instance Data.Aeson.Types.FromJSON.FromJSON CreateChatCompletionRequestModel'Variants
    where {parseJSON val = case (CreateChatCompletionRequestModel'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((CreateChatCompletionRequestModel'CreateChatCompletionRequestModel'OneOf2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                           {Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a;
                            Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a}}
-- | Defines the object schema located at @components.schemas.CreateChatCompletionRequest.properties.response_format@ in the specification.
-- 
-- An object specifying the format that the model must output. Compatible with [GPT-4 Turbo](\/docs\/models\/gpt-4-and-gpt-4-turbo) and all GPT-3.5 Turbo models newer than \`gpt-3.5-turbo-1106\`.
-- 
-- Setting to \`{ \"type\": \"json_object\" }\` enables JSON mode, which guarantees the message the model generates is valid JSON.
-- 
-- **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if \`finish_reason=\"length\"\`, which indicates the generation exceeded \`max_tokens\` or the conversation exceeded the max context length.
data CreateChatCompletionRequestResponseFormat' = CreateChatCompletionRequestResponseFormat' {
  -- | type: Must be one of \`text\` or \`json_object\`.
  createChatCompletionRequestResponseFormat'Type :: (GHC.Maybe.Maybe CreateChatCompletionRequestResponseFormat'Type')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateChatCompletionRequestResponseFormat'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (createChatCompletionRequestResponseFormat'Type obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (createChatCompletionRequestResponseFormat'Type obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON CreateChatCompletionRequestResponseFormat'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateChatCompletionRequestResponseFormat'" (\obj -> GHC.Base.pure CreateChatCompletionRequestResponseFormat' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "type"))}
-- | Create a new 'CreateChatCompletionRequestResponseFormat'' with all required fields.
mkCreateChatCompletionRequestResponseFormat' :: CreateChatCompletionRequestResponseFormat'
mkCreateChatCompletionRequestResponseFormat' = CreateChatCompletionRequestResponseFormat'{createChatCompletionRequestResponseFormat'Type = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.CreateChatCompletionRequest.properties.response_format.properties.type@ in the specification.
-- 
-- Must be one of \`text\` or \`json_object\`.
data CreateChatCompletionRequestResponseFormat'Type' =
   CreateChatCompletionRequestResponseFormat'Type'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | CreateChatCompletionRequestResponseFormat'Type'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | CreateChatCompletionRequestResponseFormat'Type'EnumText -- ^ Represents the JSON value @"text"@
  | CreateChatCompletionRequestResponseFormat'Type'EnumJsonObject -- ^ Represents the JSON value @"json_object"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateChatCompletionRequestResponseFormat'Type'
    where {toJSON (CreateChatCompletionRequestResponseFormat'Type'Other val) = val;
           toJSON (CreateChatCompletionRequestResponseFormat'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (CreateChatCompletionRequestResponseFormat'Type'EnumText) = "text";
           toJSON (CreateChatCompletionRequestResponseFormat'Type'EnumJsonObject) = "json_object"}
instance Data.Aeson.Types.FromJSON.FromJSON CreateChatCompletionRequestResponseFormat'Type'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "text" -> CreateChatCompletionRequestResponseFormat'Type'EnumText
                                             | val GHC.Classes.== "json_object" -> CreateChatCompletionRequestResponseFormat'Type'EnumJsonObject
                                             | GHC.Base.otherwise -> CreateChatCompletionRequestResponseFormat'Type'Other val)}
-- | Defines the oneOf schema located at @components.schemas.CreateChatCompletionRequest.properties.stop.oneOf@ in the specification.
-- 
-- Up to 4 sequences where the API will stop generating further tokens.
data CreateChatCompletionRequestStop'Variants =
   CreateChatCompletionRequestStop'NullableText (OpenAI.Common.Nullable Data.Text.Internal.Text)
  | CreateChatCompletionRequestStop'ListTText ([Data.Text.Internal.Text])
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateChatCompletionRequestStop'Variants
    where {toJSON (CreateChatCompletionRequestStop'NullableText a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (CreateChatCompletionRequestStop'ListTText a) = Data.Aeson.Types.ToJSON.toJSON a}
instance Data.Aeson.Types.FromJSON.FromJSON CreateChatCompletionRequestStop'Variants
    where {parseJSON val = case (CreateChatCompletionRequestStop'NullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((CreateChatCompletionRequestStop'ListTText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                           {Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a;
                            Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a}}
