-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Image
module OpenAI.Types.Image where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified OpenAI.Common
import OpenAI.TypeAlias

-- | Defines the object schema located at @components.schemas.Image@ in the specification.
-- 
-- Represents the url or the content of an image generated by the OpenAI API.
data Image = Image {
  -- | b64_json: The base64-encoded JSON of the generated image, if \`response_format\` is \`b64_json\`.
  imageB64Json :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | revised_prompt: The prompt that was used to generate the image, if there was any revision to the prompt.
  , imageRevisedPrompt :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | url: The URL of the generated image, if \`response_format\` is \`url\` (default).
  , imageUrl :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Image
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("b64_json" Data.Aeson.Types.ToJSON..=)) (imageB64Json obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("revised_prompt" Data.Aeson.Types.ToJSON..=)) (imageRevisedPrompt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("url" Data.Aeson.Types.ToJSON..=)) (imageUrl obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("b64_json" Data.Aeson.Types.ToJSON..=)) (imageB64Json obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("revised_prompt" Data.Aeson.Types.ToJSON..=)) (imageRevisedPrompt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("url" Data.Aeson.Types.ToJSON..=)) (imageUrl obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON Image
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "Image" (\obj -> ((GHC.Base.pure Image GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "b64_json")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "revised_prompt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "url"))}
-- | Create a new 'Image' with all required fields.
mkImage :: Image
mkImage = Image{imageB64Json = GHC.Maybe.Nothing,
                imageRevisedPrompt = GHC.Maybe.Nothing,
                imageUrl = GHC.Maybe.Nothing}
