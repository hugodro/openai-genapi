-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema RunStepDetailsToolCallsCodeOutputImageObject
module OpenAI.Types.RunStepDetailsToolCallsCodeOutputImageObject where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified OpenAI.Common
import OpenAI.TypeAlias

-- | Defines the object schema located at @components.schemas.RunStepDetailsToolCallsCodeOutputImageObject@ in the specification.
-- 
-- 
data RunStepDetailsToolCallsCodeOutputImageObject = RunStepDetailsToolCallsCodeOutputImageObject {
  -- | image
  runStepDetailsToolCallsCodeOutputImageObjectImage :: RunStepDetailsToolCallsCodeOutputImageObjectImage'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON RunStepDetailsToolCallsCodeOutputImageObject
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["image" Data.Aeson.Types.ToJSON..= runStepDetailsToolCallsCodeOutputImageObjectImage obj] : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "image"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["image" Data.Aeson.Types.ToJSON..= runStepDetailsToolCallsCodeOutputImageObjectImage obj] : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "image"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON RunStepDetailsToolCallsCodeOutputImageObject
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "RunStepDetailsToolCallsCodeOutputImageObject" (\obj -> GHC.Base.pure RunStepDetailsToolCallsCodeOutputImageObject GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "image"))}
-- | Create a new 'RunStepDetailsToolCallsCodeOutputImageObject' with all required fields.
mkRunStepDetailsToolCallsCodeOutputImageObject :: RunStepDetailsToolCallsCodeOutputImageObjectImage' -- ^ 'runStepDetailsToolCallsCodeOutputImageObjectImage'
  -> RunStepDetailsToolCallsCodeOutputImageObject
mkRunStepDetailsToolCallsCodeOutputImageObject runStepDetailsToolCallsCodeOutputImageObjectImage = RunStepDetailsToolCallsCodeOutputImageObject{runStepDetailsToolCallsCodeOutputImageObjectImage = runStepDetailsToolCallsCodeOutputImageObjectImage}
-- | Defines the object schema located at @components.schemas.RunStepDetailsToolCallsCodeOutputImageObject.properties.image@ in the specification.
-- 
-- 
data RunStepDetailsToolCallsCodeOutputImageObjectImage' = RunStepDetailsToolCallsCodeOutputImageObjectImage' {
  -- | file_id: The [file](\/docs\/api-reference\/files) ID of the image.
  runStepDetailsToolCallsCodeOutputImageObjectImage'FileId :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON RunStepDetailsToolCallsCodeOutputImageObjectImage'
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["file_id" Data.Aeson.Types.ToJSON..= runStepDetailsToolCallsCodeOutputImageObjectImage'FileId obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["file_id" Data.Aeson.Types.ToJSON..= runStepDetailsToolCallsCodeOutputImageObjectImage'FileId obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON RunStepDetailsToolCallsCodeOutputImageObjectImage'
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "RunStepDetailsToolCallsCodeOutputImageObjectImage'" (\obj -> GHC.Base.pure RunStepDetailsToolCallsCodeOutputImageObjectImage' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "file_id"))}
-- | Create a new 'RunStepDetailsToolCallsCodeOutputImageObjectImage'' with all required fields.
mkRunStepDetailsToolCallsCodeOutputImageObjectImage' :: Data.Text.Internal.Text -- ^ 'runStepDetailsToolCallsCodeOutputImageObjectImage'FileId'
  -> RunStepDetailsToolCallsCodeOutputImageObjectImage'
mkRunStepDetailsToolCallsCodeOutputImageObjectImage' runStepDetailsToolCallsCodeOutputImageObjectImage'FileId = RunStepDetailsToolCallsCodeOutputImageObjectImage'{runStepDetailsToolCallsCodeOutputImageObjectImage'FileId = runStepDetailsToolCallsCodeOutputImageObjectImage'FileId}
